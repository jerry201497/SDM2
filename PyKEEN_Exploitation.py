from pykeen.triples import TriplesFactory
from pykeen.models import TransE
from pykeen.training import SLCWATrainingLoop
from pykeen.evaluation import RankBasedEvaluator
import torch

#Load the triples
tf = TriplesFactory.from_path("kge_triples_filtered.tsv")
print(f"TriplesFactory loaded with {len(tf.triples)} triples.")

#Define and train model
model = TransE(triples_factory=tf, embedding_dim=50)
training_loop = SLCWATrainingLoop(model=model, triples_factory=tf)
training_loop.train(triples_factory=tf, num_epochs=10)


#Evaluate the model
evaluator = RankBasedEvaluator()
results = evaluator.evaluate(model, mapped_triples=tf.mapped_triples)

#Access embeddings
entity_embeddings = model.entity_representations[0]().detach().cpu()
entity_to_id = tf.entity_to_id

#Example: get embedding for one paper and find the most similar entity
example_paper = next((e for e in entity_to_id if "paper_" in e), None)
paper_idx = entity_to_id.get(example_paper)
paper_vector = entity_embeddings[paper_idx]

#Find the closest entity by Euclidean distance
distances = torch.norm(entity_embeddings - paper_vector, dim=1)
closest_idx = torch.argmin(distances).item()
closest_entity = list(entity_to_id.keys())[closest_idx]

#Save results
with open("exploitation_results.txt", "w", encoding="utf-8") as f:
    f.write(f"Selected paper: {example_paper}\n")
    f.write(f"Closest entity: {closest_entity}\n\n")
    f.write("Evaluation summary:\n")
    f.write(str(results.to_dict()))
